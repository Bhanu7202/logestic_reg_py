# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UvBjN0mbdeIvx2vTeX1xJT-OgDJZPQlV
"""

import pandas as pd

# Load the datasets
train_data = pd.read_csv('Titanic_train.csv')
test_data = pd.read_csv('Titanic_test.csv')

# Display the first few rows of the training data
print(train_data.head())

# Check the data types and non-null counts
print(train_data.info())

# Summary statistics
print(train_data.describe())

import matplotlib.pyplot as plt
import seaborn as sns

# Histogram of Age
plt.figure(figsize=(10, 6))
sns.histplot(train_data['Age'], bins=30, kde=True)
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Box plot of Fare by Survival
plt.figure(figsize=(10, 6))
sns.boxplot(x='Survived', y='Fare', data=train_data)
plt.title('Fare Distribution by Survival')
plt.xlabel('Survived')
plt.ylabel('Fare')
plt.show()

# Pair plot to visualize relationships
sns.pairplot(train_data, hue='Survived')
plt.show()

# Fill missing Age values with the median
train_data['Age'].fillna(train_data['Age'].median(), inplace=True)

# Fill missing Fare values with the median
train_data['Fare'].fillna(train_data['Fare'].median(), inplace=True)

# Drop columns with too many missing values or irrelevant features
train_data.drop(['Cabin', 'Ticket'], axis=1, inplace=True)

# Convert categorical variables into dummy/indicator variables
train_data = pd.get_dummies(train_data, columns=['Sex', 'Embarked'], drop_first=True)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Define features and target variable
X = train_data.drop(['PassengerId', 'Survived', 'Name', 'Age'], axis=1)
y = train_data['Survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve

# Make predictions
y_pred = model.predict(X_test)
y_pred_proba = model.predict_proba(X_test)[:, 1]

# Calculate metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred_proba)

print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'F1 Score: {f1:.2f}')
print(f'ROC AUC: {roc_auc:.2f}')

# Visualize the ROC curve
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)
plt.figure(figsize=(10, 6))
plt.plot(fpr, tpr, label='ROC Curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic')
plt.legend(loc='lower right')
plt.show()

# Display the coefficients
coefficients = pd.DataFrame(model.coef_[0], X.columns, columns=['Coefficient'])
print(coefficients)


'''import streamlit as st
import numpy as np

# Load the model
import joblib
model = joblib.load('logistic_regression_model.pkl')

# Streamlit app
st.title('Titanic Survival Prediction')

# User inputs
sex = st.selectbox('Sex', ['male', 'female'])
age = st.number_input('Age', min_value=0, max_value=100, value=30)
fare = st.number_input('Fare', min_value=0.0, value=10.0)
embarked = st.selectbox('Embarked', ['C', 'Q', 'S'])

# Prepare input for prediction
input_data = np.array([[age, fare, 1 if sex == 'male' else 0, 1 if embarked == 'C' else 0, 1 if embarked == 'Q' else 0]])
prediction = model.predict(input_data)

# Display prediction
if st.button('Predict'):
    st.write('Survived' if prediction[0] == 1 else 'Did not survive')'''
import streamlit as st
import numpy as np
import joblib

# Load the model
model = joblib.load('logistic_regression_model.pkl')

# Streamlit app
st.title('Titanic Survival Prediction')

# User inputs
pclass = st.selectbox('Pclass', [1, 2, 3])  # Adding Pclass input
sex = st.selectbox('Sex', ['male', 'female'])
age = st.number_input('Age', min_value=0, max_value=100, value=30)
sibsp = st.number_input('SibSp', min_value=0, value=0)  # Adding SibSp input
parch = st.number_input('Parch', min_value=0, value=0)  # Adding Parch input
fare = st.number_input('Fare', min_value=0.0, value=10.0)
embarked = st.selectbox('Embarked', ['C', 'Q', 'S'])

# Prepare input for prediction
input_data = np.array([[pclass, age, fare, 1 if sex == 'male' else 0, sibsp, parch, 1 if embarked == 'C' else 0, 1 if embarked == 'Q' else 0]])

# Display prediction
if st.button('Predict'):
    try:
        prediction = model.predict(input_data)
        st.write('Survived' if prediction[0] == 1 else 'Did not survive')
    except Exception as e:
        st.error(f"An error occurred: {e}")









